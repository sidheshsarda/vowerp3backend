name: Deploy

on:
  push:
    branches:
      - dev
      - main
  pull_request:
    branches:
      - dev
      - main

jobs:
  test-and-deploy-dev:
    if: github.ref == 'refs/heads/dev' || (github.event_name == 'pull_request' && github.base_ref == 'dev')
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12-slim'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Build Docker image
      - name: Build Docker image
        run: docker build -t python-deploy .

      # Step 5: setup AWS credentials
      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
        
      # Step 6: Login to AWS ECR
      - name: Login to AWS ECR
        run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_URL }}

      # Step 7: Tag and push docker image
      - name: Tag and push docker image
        run: |
          docker tag python-deploy-dev:latest ${{ secrets.AWS_ECR_URL }}/python-deploy-dev:latest
          docker push ${{ secrets.AWS_ECR_URL }}/python-deploy-dev:latest

      #step 8: Deploy to AWS EC2
      - name: Deploy to AWS EC2
        run: |
          aws ecs update-service --cluster vowerp3backend-cluster --service vowerp3backend-dev-service --force-new-deployment

      #step 9: Test Application Availability
      - name: Test Application Availability
        run: |
          curl http://ec2-3-8-116-0.eu-west-2.compute.amazonaws.com:5005 || exit 1
      
  test-and-deploy-main:
    if: github.ref == 'refs/heads/main' || (github.event_name == 'pull_request' && github.base_ref == 'main')
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12-slim'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Build Docker image
      - name: Build Docker image
        run: docker build -t python-deploy .

      # Step 5: setup AWS credentials
      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
        
      # Step 6: Login to AWS ECR
      - name: Login to AWS ECR
        run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_URL }}

      # Step 7: Tag and push docker image
      - name: Tag and push docker image
        run: |
          docker tag python-deploy-main:latest ${{ secrets.AWS_ECR_URL }}/python-deploy-main:latest
          docker push ${{ secrets.AWS_ECR_URL }}/python-deploy-main:latest

      #step 8: Deploy to AWS EC2
      - name: Deploy to AWS EC2
        run: |
          aws ecs update-service --cluster vowerp3backend-cluster --service vowerp3backend-main-service --force-new-deployment

      #step 9: Test Application Availability
      - name: Test Application Availability
        run: |
          curl http://ec2-3-8-116-0.eu-west-2.compute.amazonaws.com:5005 || exit 1
      

