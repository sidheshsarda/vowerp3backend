name: Build and Deploy Docker Image to AWS ECR

on:
  push:
    branches:
      - main  # Adjust if needed

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Install or update AWS CLI if needed
      - name: Install or Update AWS CLI
        run: |
          if ! command -v aws &> /dev/null; then
            echo "AWS CLI not found, installing..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          else
            echo "AWS CLI is already installed, updating..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install --update
          fi

      # Step 3: Verify AWS Authentication
      - name: Verify AWS Authentication
        run: aws sts get-caller-identity

      # Step 4: Log in to AWS ECR (using AWS CLI)
      - name: Log in to AWS ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws --version  # Check if AWS CLI is installed
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_URL }}

      # Step 5: Build and Push Docker Image to AWS ECR
      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.AWS_ECR_URL }}/python-deploy:latest .
          docker push ${{ secrets.AWS_ECR_URL }}/python-deploy:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-deploy

    steps:
      - name: Deploy to AWS EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ubuntu
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > private-key.pem
          chmod 600 private-key.pem

   

      - name: Log in to AWS ECR from EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i private-key.pem $EC2_USER@$EC2_HOST <<EOF
            aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_URL }}
          EOF

      - name: Pull Latest Docker Image on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i private-key.pem $EC2_USER@$EC2_HOST <<EOF
            docker pull ${{ secrets.AWS_ECR_URL }}/python-deploy:latest
          EOF

      - name: Stop and Remove Existing Docker Container
        run: |
          ssh -o StrictHostKeyChecking=no -i private-key.pem $EC2_USER@$EC2_HOST <<EOF
            docker stop python-app || true
            docker rm python-app || true
          EOF

      - name: Run the Updated Docker Container
        run: |
          ssh -o StrictHostKeyChecking=no -i private-key.pem $EC2_USER@$EC2_HOST <<EOF
            docker run -d --name python-app -p 5005:5005 ${{ secrets.AWS_ECR_URL }}/python-deploy:latest
          EOF
